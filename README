Мой конфигурационный файл Vim
Этот репозиторий содержит мой конфигурационный файл для Vim, 
который использует плагины и настройку интерфейса для улучшенной работы с кодом.


Установка
Vim-plug: Убедитесь, что у вас установлен vim-plug. Это менеджер плагинов, 
который используется для управления плагинами в этом конфигурационном файле.

Для установки vim-plug выполните следующую команду в терминале:
curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim


Копирование файла: 
Склонируйте этот репозиторий и скопируйте .vimrc в домашний каталог:
git clone <URL вашего репозитория>
cp <путь_к_вашему_файлу> ~/.vimrc

Установка плагинов: 
Откройте Vim и выполните команду :PlugInstall, чтобы установить все указанные плагины.
Основные плагины
NERDTree: Плагин для работы с файловой системой в виде дерева.
vim-airline: Улучшенная строка статуса с поддержкой шрифтов powerline.
coc.nvim: Плагин для автозавершения кода и интеграции с языковыми серверами.
onedark.vim: Цветовая схема на основе темы One Dark.
emmet-vim: Поддержка Emmet для HTML и CSS.
vim-surround: Удобные команды для работы с окружениями (скобки, кавычки и т.п.).


Настройки
Цветовая схема: onedark с включенным поддержкой 24-битных цветов.
Отступы: Используются пробелы вместо табуляций. Отступы заданы на уровне 4 пробелов.
Нумерация строк: Включена для удобства навигации.
NERDTree: Запускается с помощью команды <Ctrl-n>.
Автокомплит: Используется coc.nvim для автозавершения и подсказок по коду.


Ключевые команды
Ctrl-J/K/H/L: Переключение между окнами Vim.
F5: Запуск текущего файла на Python.
<Leader>a: Применение действий к коду.
<Leader>f: Форматирование выделенного блока кода.


Параметры для работы с Python
Поддержка Python обеспечивается с помощью coc-python.
Перед сохранением .py файлов автоматически удаляются лишние пробелы в конце строк.
